;; Modified   by https://github.com/gh0stzk/dotfiles

(defvar volum false)
(defvar notify false)
(defvar power false)
(defvar pac false)

;; Workspaces
(include "./workspaces.yuck")

;; Volume vars
(defpoll volume_icon :interval "1s" "scripts/Volume --icon")
(defpoll volume_value :interval "1s" "scripts/Volume --vol")

;; Network
(defpoll WIFIICON :interval "15s" `scripts/Network --icon`)
(defpoll NETSTAT :interval "15s" `scripts/Network --stat`)

;; Updates vars
(defpoll UPDATES :interval "15m" `cat $HOME/.cache/Updates.txt 2>/dev/null`)

;; Battery vars
(defpoll battery_status :interval "10s" "scripts/battery battery_status")
(defpoll battery_icon :run-while battery_status :interval "15s" "scripts/battery icon")
(defpoll battery_percentage :run-while battery_status :interval "15s" "scripts/battery percent")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Launcher Widgets ;;
(defwidget launcher []
	(box :orientation "v"
		   :space-evenly "false"
		   :spacing -15
	  (eventbox :cursor "pointer"
		(button :class "launcher_icon"
		   	    :onclick "cd ; OpenApps --menu"
		   	    :onrightclick "OpenApps --rice"
		   	    "ó°£‡"
      )
    )
  )
)

;; Wifi Widgets ;;
(defwidget wifi []
	(box	:orientation "v"
		(eventbox 	:cursor "pointer"
			(button :style "background-image: url('${WIFIICON}');"
					:class "trayicon"
					:tooltip "${NETSTAT}"
					:onclick "OpenApps --netmanager")
		)
	)
)

;; Battery Widget
(defwidget battery []
  (box :orientation "v"
       :visible {battery_status ?: "false"}
    (eventbox :cursor "pointer"
      (button :class "trayicon"
              :style "background-image: url('${battery_icon}');"
              :tooltip "Battery: ${battery_percentage}%"))))

;; control center ;;
(defwidget notifycenter []
	(eventbox	:onhover "${EWW_CMD} update notify=true"
				:onhoverlost "${EWW_CMD} update notify=false"
				:cursor "pointer"
	(box		:orientation "v"
				:space-evenly "false"
				:vexpand "false"

	(revealer	:transition "slideup"
				:reveal notify
				:duration "550ms"
	(box		:orientation "v"
				:space-evenly "false"

	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/riceselector.png');"
				:class "trayicon"
				:tooltip "Change Rice!"
				:onclick "OpenApps --rice"))

	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/music_player.png');"
				:class "trayicon"
				:tooltip "Music Player"
				:onclick "OpenApps --player"))

	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/usercard.png');"
				:class "trayicon"
				:tooltip "User Card"
				:onclick "OpenApps --usercard"))))

	(button		:style "background-image: url('images/widget_apps.png');"
				:class "trayicon"
				:tooltip "Widgets"))))



;; Pacman Widgets ;;
(defwidget pacman []
	(eventbox	:onhover "${EWW_CMD} update pac=true"
				:onhoverlost "${EWW_CMD} update pac=false"
	(box		:orientation "v"
				:space-evenly "false"
				:vexpand "false"

	(revealer	:transition "slideup"
				:reveal pac
				:duration "550ms"
	(box		:orientation "v"
				:space-evenly "false"

	(label  	:class "bar-updates-text"
				:text "${UPDATES}")))

	(eventbox   :cursor "pointer"
	(button		:style "background-image: url('images/pac_man.png');"
				:class "trayicon"
				:onrightclick "OpenApps --update"
				:onclick "OpenApps --checkupdates")))))


;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${EWW_CMD} update volum=true"
			  :onhoverlost "${EWW_CMD} update volum=false"
			  :cursor "pointer"
	(box      :orientation "v"
			  :space-evenly "false"
			  :spacing "2"
	(revealer :transition "slideup"
			  :reveal volum
			  :duration "550ms"
	(scale    :class "volbar"
			  :value {volume_value ?: "0"}
			  :onchange "pamixer --set-volume {}"
			  :orientation "v"
			  :flipped true
			  :tooltip "Volume: ${volume_value}%"
			  :max 101
			  :min 0))
	(button   :style "background-image: url('${volume_icon}');"
			  :class "trayicon"
			  :onrightclick "OpenApps --soundcontrol"
			  :onclick "scripts/Volume --toggle-muted"))))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "v"
			:class "time"
			:valign "end"
	(eventbox :cursor "pointer"
	(button	:onclick "OpenApps --calendar"
			:class "time-hour" "${formattime(EWW_TIME, "%H")}"))
	(eventbox :cursor "pointer"
	(button	:onclick "OpenApps --calendar"
			:class "time-min" "${formattime(EWW_TIME, "%M")}"))))


;; Powermenu Widgets ;;
(defwidget power []
	(eventbox	:onhover "${EWW_CMD} update power=true"
				:onhoverlost "${EWW_CMD} update power=false"
				:cursor "pointer"

	(box	:orientation "v"
			:space-evenly "false"
			:vexpand "false"
			:class "powermenu"

	(revealer	:transition "slideup"
				:reveal power
				:duration "550ms"

	(box	:orientation "v"
			:space-evenly "false"

	(button	:style "background-image: url('images/enpass.png');"
			:class "button-lock"
			:tooltip "Lock Screen"
			:onclick "ScreenLocker")

	(button :style "background-image: url('images/sys-sleep.png');"
			:class "button-bspres"
			:tooltip "Suspend computer"
			:onclick "systemctl suspend")

	(button	:style "background-image: url('images/sys-reboot.png');"
			:class "button-reb"
	  		:tooltip "Reboot"
			:onclick "reboot")

	(button	:style "background-image: url('images/sys-poweroff.png');"
			:class "button-off"
			:tooltip "Shutdown"
			:onclick "shutdown now")))

	(button	:style "background-image: url('images/sys-powermenu.png');"
			:class "button-powermenu"
			:tooltip "Power Menu"))))


;; Systray widget ;;
(defwidget systemtray []
  (box :orientation "v" :halign "center"
    (systray :class "tray" :orientation "v" :icon-size 16 :spacing 5)
  )
)


;; Top Widgets ;;
(defwidget top [monitor]
	(box	:orientation "v"
			:space-evenly "false"
			:valign "start"
(launcher)
(workspaces :monitor monitor)))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "v"
			:space-evenly "false"
(time)
(power)))

;; Control Panel Widgets ;;
(defwidget control []
	(box :orientation "v"
		 :space-evenly false
		 :class "control"
(notifycenter)
(volum)
(wifi)
(battery)
(pacman)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "v"
		 :space-evenly "false"
		 :valign "end"
		 :spacing 5
(systemtray)
(control)
(bottom)))

;; Bar Widgets ;;
(defwidget bar [monitor]
	(box :class "eww_bar"
		 :orientation "v"
		 :vexpand "false"
		 :hexpand "false"
(top :monitor monitor)
(end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar [monitor]
	:monitor monitor
	:geometry (geometry :x "10px"
						:y "0%"
						:anchor "left center"
						:height "90%"
						:width "47px")
	:reserve (struts :distance "5px"
					 :side "left")
	:wm-ignore false
	(bar :monitor monitor))
